{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\raviprasath\\\\Desktop\\\\10-react-quiz\\\\src\\\\components\\\\App.js\",\n  _s = $RefreshSig$();\n// import { useEffect, useReducer } from \"react\";\n\nimport { useState } from \"react\";\n\n// import Header from \"./Header\";\n// import Main from \"./Main\";\n// import Loader from \"./Loader\";\n// import Error from \"./Error\";\n// import StartScreen from \"./StartScreen\";\n// import Questions from \"./Questions\";\n// import NextButton from \"./NextButton\";\n// import Progress from \"./Progress\";\n// import FinishScreen from \"./FinishScreen\";\n// import Timer from \"./Timer\";\n// // import Footer from \"./Footer\";\n\n// const SECS_PER_QUESTION = 30;\n\n// const initialState = {\n//   questions: [],\n//   //\n//   status: \"loading\",\n//   index: 0,\n//   answer: null,\n//   points: 0,\n//   highscore: 0,\n//   secondsRemaining: null,\n// };\n\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case \"dataReceived\":\n//       return { ...state, questions: action.payload, status: \"ready\" };\n\n//     case \"dataFailed\":\n//       return {\n//         ...state,\n//         state: \"error\",\n//       };\n\n//     case \"start\":\n//       return {\n//         ...state,\n//         status: \"active\",\n//         secondsRemaining: state.questions.length * SECS_PER_QUESTION,\n//       };\n\n//     case \"newAnswer\":\n//       const question = state.questions.at(state.index);\n//       debugger;\n\n//       return {\n//         ...state,\n//         answer: action.payload,\n//         points:\n//           action.payload === question.correctOption\n//             ? state.points + 1\n//             : state.points,\n//       };\n//     case \"nextQuestion\":\n//       return { ...state, index: state.index + 1, answer: null };\n\n//     case \"finish\":\n//       return {\n//         ...state,\n//         status: \"finished\",\n//         highscore:\n//           state.points > state.highscore ? state.points : state.highscore,\n//       };\n//     case \"restart\":\n//       return { ...initialState, questions: state.questions, status: \"ready\" };\n//     // return {\n//     //   ...state,\n//     //   points: 0,\n//     //   highscore: 0,\n//     //   index: 0,\n//     //   answer: null,\n//     //   status: \"ready\",\n//     // };\n\n//     case \"tick\":\n//       return {\n//         ...state,\n//         secondsRemaining: state.secondsRemaining - 1,\n//         status: state.secondsRemaining === 0 ? \"finished\" : state.status,\n//       };\n\n//     default:\n//       throw new Error(\"Action unknow\");\n//   }\n// }\n\n// export default function App() {\n//   const [\n//     { questions, status, index, answer, points, highscore, secondsRemaining },\n//     dispatch,\n//   ] = useReducer(reducer, initialState);\n\n//   const numQuestions = questions.length;\n//   const maxPossiblePoints = questions.reduce(\n//     (prev, cur) => prev + cur.points,\n//     0\n//   );\n\n//   useEffect(function () {\n//     fetch(\"http://localhost:9000/questions\")\n//       .then((res) => res.json())\n//       .then((data) => dispatch({ type: \"dataReceived\", payload: data }))\n//       .catch((err) => dispatch({ type: \"dataFailed\" }));\n//   }, []);\n\n//   return (\n//     <div className=\"app\">\n//       <Header />\n\n//       <Main>\n//         {status === \"loading\" && <Loader />}\n//         {status === \"error\" && <Error />}\n//         {status === \"ready\" && (\n//           <StartScreen numQuestions={numQuestions} dispatch={dispatch} />\n//         )}\n//         {status === \"active\" && (\n//           <>\n//             <Progress\n//               index={index}\n//               numQuestions={numQuestions}\n//               points={points}\n//               maxPossiblePoints={maxPossiblePoints}\n//               answer={answer}\n//             />{\" \"}\n//             <Questions\n//               question={questions[index]}\n//               dispatch={dispatch}\n//               answer={answer}\n//             />\n//             <footer>\n//               <Timer dispatch={dispatch} secondsRemaining={secondsRemaining} />\n//               <NextButton\n//                 dispatch={dispatch}\n//                 answer={answer}\n//                 numQuestions={numQuestions}\n//                 index={index}\n//               />\n//             </footer>\n//           </>\n//         )}\n\n//         {status === \"finished\" && (\n//           <FinishScreen\n//             points={points}\n//             maxPossiblePoints={maxPossiblePoints}\n//             highscore={highscore}\n//             dispatch={dispatch}\n//           />\n//         )}\n//       </Main>\n//     </div>\n//   );\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [number, setNumber] = useState(1);\n  const addition = () => {\n    setNumber(number + 1);\n    debugger;\n    alert(\"HI\");\n    console.log(number);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: number\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addition,\n      children: \" Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"gJdMPyQQfobVakqUfhz51LB7Ehk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","_s","number","setNumber","addition","alert","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/raviprasath/Desktop/10-react-quiz/src/components/App.js"],"sourcesContent":["// import { useEffect, useReducer } from \"react\";\n\nimport { useState } from \"react\";\n\n// import Header from \"./Header\";\n// import Main from \"./Main\";\n// import Loader from \"./Loader\";\n// import Error from \"./Error\";\n// import StartScreen from \"./StartScreen\";\n// import Questions from \"./Questions\";\n// import NextButton from \"./NextButton\";\n// import Progress from \"./Progress\";\n// import FinishScreen from \"./FinishScreen\";\n// import Timer from \"./Timer\";\n// // import Footer from \"./Footer\";\n\n// const SECS_PER_QUESTION = 30;\n\n// const initialState = {\n//   questions: [],\n//   //\n//   status: \"loading\",\n//   index: 0,\n//   answer: null,\n//   points: 0,\n//   highscore: 0,\n//   secondsRemaining: null,\n// };\n\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case \"dataReceived\":\n//       return { ...state, questions: action.payload, status: \"ready\" };\n\n//     case \"dataFailed\":\n//       return {\n//         ...state,\n//         state: \"error\",\n//       };\n\n//     case \"start\":\n//       return {\n//         ...state,\n//         status: \"active\",\n//         secondsRemaining: state.questions.length * SECS_PER_QUESTION,\n//       };\n\n//     case \"newAnswer\":\n//       const question = state.questions.at(state.index);\n//       debugger;\n\n//       return {\n//         ...state,\n//         answer: action.payload,\n//         points:\n//           action.payload === question.correctOption\n//             ? state.points + 1\n//             : state.points,\n//       };\n//     case \"nextQuestion\":\n//       return { ...state, index: state.index + 1, answer: null };\n\n//     case \"finish\":\n//       return {\n//         ...state,\n//         status: \"finished\",\n//         highscore:\n//           state.points > state.highscore ? state.points : state.highscore,\n//       };\n//     case \"restart\":\n//       return { ...initialState, questions: state.questions, status: \"ready\" };\n//     // return {\n//     //   ...state,\n//     //   points: 0,\n//     //   highscore: 0,\n//     //   index: 0,\n//     //   answer: null,\n//     //   status: \"ready\",\n//     // };\n\n//     case \"tick\":\n//       return {\n//         ...state,\n//         secondsRemaining: state.secondsRemaining - 1,\n//         status: state.secondsRemaining === 0 ? \"finished\" : state.status,\n//       };\n\n//     default:\n//       throw new Error(\"Action unknow\");\n//   }\n// }\n\n// export default function App() {\n//   const [\n//     { questions, status, index, answer, points, highscore, secondsRemaining },\n//     dispatch,\n//   ] = useReducer(reducer, initialState);\n\n//   const numQuestions = questions.length;\n//   const maxPossiblePoints = questions.reduce(\n//     (prev, cur) => prev + cur.points,\n//     0\n//   );\n\n//   useEffect(function () {\n//     fetch(\"http://localhost:9000/questions\")\n//       .then((res) => res.json())\n//       .then((data) => dispatch({ type: \"dataReceived\", payload: data }))\n//       .catch((err) => dispatch({ type: \"dataFailed\" }));\n//   }, []);\n\n//   return (\n//     <div className=\"app\">\n//       <Header />\n\n//       <Main>\n//         {status === \"loading\" && <Loader />}\n//         {status === \"error\" && <Error />}\n//         {status === \"ready\" && (\n//           <StartScreen numQuestions={numQuestions} dispatch={dispatch} />\n//         )}\n//         {status === \"active\" && (\n//           <>\n//             <Progress\n//               index={index}\n//               numQuestions={numQuestions}\n//               points={points}\n//               maxPossiblePoints={maxPossiblePoints}\n//               answer={answer}\n//             />{\" \"}\n//             <Questions\n//               question={questions[index]}\n//               dispatch={dispatch}\n//               answer={answer}\n//             />\n//             <footer>\n//               <Timer dispatch={dispatch} secondsRemaining={secondsRemaining} />\n//               <NextButton\n//                 dispatch={dispatch}\n//                 answer={answer}\n//                 numQuestions={numQuestions}\n//                 index={index}\n//               />\n//             </footer>\n//           </>\n//         )}\n\n//         {status === \"finished\" && (\n//           <FinishScreen\n//             points={points}\n//             maxPossiblePoints={maxPossiblePoints}\n//             highscore={highscore}\n//             dispatch={dispatch}\n//           />\n//         )}\n//       </Main>\n//     </div>\n//   );\n// }\n\nfunction App() {\n  const [number, setNumber] = useState(1);\n\n  const addition = () => {\n    setNumber(number + 1);\n    debugger;\n    alert(\"HI\");\n    console.log(number);\n  };\n  return (\n    <div>\n      <p>{number}</p>\n      <button onClick={addition}> Add</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;;AAEhb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAEvC,MAAMO,QAAQ,GAAGA,CAAA,KAAM;IACrBD,SAAS,CAACD,MAAM,GAAG,CAAC,CAAC;IACrB;IACAG,KAAK,CAAC,IAAI,CAAC;IACXC,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;EACrB,CAAC;EACD,oBACEH,OAAA;IAAAS,QAAA,gBACET,OAAA;MAAAS,QAAA,EAAIN;IAAM;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACfb,OAAA;MAAQc,OAAO,EAAET,QAAS;MAAAI,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEV;AAACX,EAAA,CAfQD,GAAG;AAAAc,EAAA,GAAHd,GAAG;AAiBZ,eAAeA,GAAG;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}